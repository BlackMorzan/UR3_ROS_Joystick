
	    
	    # ORIENTATION
	    # pitch
	elif command == 'i':
	    Orientation[0] = Orientation[0] + 0.05
	    Orientation[1] = Orientation[1]
	    Orientation[2] = Orientation[2]
  	    Quaternion = quaternion_from_euler(x[0], x[1], x[2])
            pose_goal.orientation.x = quater[0]
    	    pose_goal.orientation.y = quater[1]
    	    pose_goal.orientation.z = quater[2]
    	    pose_goal.orientation.w = quater[3]
	    group[0].set_pose_target(pose_goal)
	    group[0].go(True)
        elif command == 'k':
	    Orientation[0] = Orientation[0] - 0.05
	    Orientation[1] = Orientation[1]
	    Orientation[2] = Orientation[2]
  	    Quaternion = quaternion_from_euler(x[0], x[1], x[2])
            pose_goal.orientation.x = quater[0]
    	    pose_goal.orientation.y = quater[1]
    	    pose_goal.orientation.z = quater[2]
    	    pose_goal.orientation.w = quater[3]
	    group[0].set_pose_target(pose_goal)
	    group[0].go(True)
	    # yaw
        elif command == 'u':
	    Orientation[0] = Orientation[0]
	    Orientation[1] = Orientation[1] + 0.05
	    Orientation[2] = Orientation[2]
  	    Quaternion = quaternion_from_euler(x[0], x[1], x[2])
            pose_goal.orientation.x = quater[0]
    	    pose_goal.orientation.y = quater[1]
    	    pose_goal.orientation.z = quater[2]
    	    pose_goal.orientation.w = quater[3]
	    group[0].set_pose_target(pose_goal)
	    group[0].go(True)
        elif command == 'o':
	    Orientation[0] = Orientation[0]
	    Orientation[1] = Orientation[1] - 0.05
	    Orientation[2] = Orientation[2]
  	    Quaternion = quaternion_from_euler(x[0], x[1], x[2])
            pose_goal.orientation.x = quater[0]
    	    pose_goal.orientation.y = quater[1]
    	    pose_goal.orientation.z = quater[2]
    	    pose_goal.orientation.w = quater[3]
	    group[0].set_pose_target(pose_goal)
	    group[0].go(True)
	    # roll
        elif command == 'j':
	    Orientation[0] = Orientation[0]
	    Orientation[1] = Orientation[1]
	    Orientation[2] = Orientation[2] + 0.05
  	    Quaternion = quaternion_from_euler(x[0], x[1], x[2])
            pose_goal.orientation.x = quater[0]
    	    pose_goal.orientation.y = quater[1]
    	    pose_goal.orientation.z = quater[2]
    	    pose_goal.orientation.w = quater[3]
	    group[0].set_pose_target(pose_goal)
	    group[0].go(True)
        elif command == 'l':
	    Orientation[0] = Orientation[0]
	    Orientation[1] = Orientation[1]
	    Orientation[2] = Orientation[2] - 0.05
  	    Quaternion = quaternion_from_euler(x[0], x[1], x[2])
            pose_goal.orientation.x = quater[0]
    	    pose_goal.orientation.y = quater[1]
    	    pose_goal.orientation.z = quater[2]
    	    pose_goal.orientation.w = quater[3]
	    group[0].set_pose_target(pose_goal)
	    group[0].go(True)
